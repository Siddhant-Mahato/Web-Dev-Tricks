                                                                  /* Trick's In Web Dev */

/* To Make Scrool Bar Having Different Color  */

body::-webkit - scrollbar { 
  background color: transparent
}

body::-webkit -scrollbar-thumb{
  background color:linear-gradient (red, blue, green)
}


/* filter is a selector plays a lot good  */

/* clip-path  = makes a lot of shape */

/* Tricks: Image in Text */

h1 {
    background-image:- url("path ") 
    Background-size :- Cover 
    Background-position:- Center 
    Background-clip :- text
    Webkit-background clip :- text
    Color: transparent 
}


/* Making Image Color Same As Background Of Div It Is In */


.container {
  background-color: blue; /* Set the background color of the div */
  width: 200px; /* Set the width of the div */
  height: 300px; /* Set the height of the div */
  position: relative; /* Set position to relative so that the image can be absolutely positioned within it */
}

.container img {
  position: absolute; /* Position the image absolutely within the div */
  top: 0; /* Align the image to the top of the div */
  left: 0; /* Align the image to the left of the div */
  width: 100%; /* Make the image fill the entire width of the div */
  height: 100%; /* Make the image fill the entire height of the div */
  object-fit: cover; /* Ensure the image covers the entire div without distortion */
  mix-blend-mode: multiply; /* Use multiply blend mode to blend the image with the background color of the div */
}


/* Multiple Color In Div */

#box{
  width: 200px; 
  height: 300px;
  background:linear-gradient(to right,red,blue);
}

/* Img Border As Colr*/

<div id="gola">
  <img src="paris.jpg" alt="Paris">
</div>

#gola{
  width: 30px; 
  height: 30px;
  border-radius :50%;
  background:linear-gradient(red,blue,yellow,pink,aqua);
  padding:2px;
}
#gola img{
  height: 100%;
  width: 100%;
  object-fit: cover;
  border-radius :50%;
}

  
/*Image Bg Shadow*/
img{
    filter:drop-shadow(10px 10px 20px);
}

/*About setTimeout and setInterval*/

`setInterval` and `setTimeout` are both functions used for timing in JavaScript, but they have different purposes and behaviors:

1. **setTimeout**:
   - `setTimeout` is used to execute a function once after a specified delay.
   - It accepts two arguments: a function to be executed and the time delay in milliseconds.
   - After the specified delay, the function is executed only once.
   - It returns a unique identifier (timer ID) that can be used to cancel the execution of the function using `clearTimeout`.

2. **setInterval**:
   - `setInterval` is used to repeatedly execute a function at specified intervals.
   - It also accepts two arguments: a function to be executed and the time interval in milliseconds.
   - The function is executed repeatedly, with each execution separated by the specified time interval.
   - It returns a unique identifier (timer ID) that can be used to cancel the repetition using `clearInterval`.

In summary, `setTimeout` is used for executing a function once after a delay, while `setInterval` is used for repeatedly executing a function at specified intervals.


/* Text Upon Border* (10)/

h1{
  font-size:110px;
  fonr-weight:900;
  -webkit-text-stroke:4px black;
  color:transparent;
}

/* */
  

